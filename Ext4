CREATE OR REPLACE PROCEDURE CREATE_MASKING_POLICIES()
  RETURNS STRING
  LANGUAGE JAVASCRIPT
  EXECUTE AS CALLER
AS
$$
var v_policy_name, v_data_type, v_function_name, v_sql, v_table_name, v_field_name, v_db_name, v_schema_name;

// Temporary table to store created policies
var createTempTableSQL = "CREATE TEMPORARY TABLE IF NOT EXISTS temp_created_policies (policy_name STRING)";
snowflake.execute({sqlText: createTempTableSQL});

// Loop through the NATIVE_ROLE_AD_MAPPING table
var mappingResultSet = snowflake.execute({sqlText: "SELECT * FROM DEV_11111_METADATA_DB.META_T.NATIVE_ROLE_AD_MAPPING"});
while (mappingResultSet.next()) {
  v_policy_name = mappingResultSet.getColumnValue("SNOWFLAKEPOLICYNAME");

  // Check if the policy has already been created
  var policyCheckSQL = "SELECT * FROM temp_created_policies WHERE policy_name = ?";
  var policyCheckStatement = snowflake.createStatement({sqlText: policyCheckSQL, binds: [v_policy_name]});
  var policyCheckResultSet = policyCheckStatement.execute();
  if (!policyCheckResultSet.next()) {
    v_data_type = (mappingResultSet.getColumnValue("DATATYPE") === 'INT' || mappingResultSet.getColumnValue("DATATYPE") === 'DECIMAL') ? 'NUMBER' :
                  (mappingResultSet.getColumnValue("DATATYPE") === 'DATE') ? 'TIMESTAMP_NTZ' : mappingResultSet.getColumnValue("DATATYPE");
    v_function_name = mappingResultSet.getColumnValue("FUNCTIONNAME");
    v_table_name = mappingResultSet.getColumnValue("TABLENAME");
    v_db_name = mappingResultSet.getColumnValue("DBNAME");
    v_schema_name = mappingResultSet.getColumnValue("SCHEMANAME");

    // Dynamic SQL to create the masking policy
    v_sql = "CREATE OR REPLACE MASKING POLICY " + v_policy_name +
            " AS (val " + v_data_type + ") RETURNS VARIANT => " +
            "CASE WHEN " + v_function_name + " THEN val ELSE NULL END;";

    // Execute the dynamic SQL
    snowflake.execute({sqlText: v_sql});

    // Insert the policy name into the temporary table to mark it as created
    var insertPolicySQL = "INSERT INTO temp_created_policies VALUES (?)";
    var insertPolicyStatement = snowflake.createStatement({sqlText: insertPolicySQL, binds: [v_policy_name]});
    insertPolicyStatement.execute();
  }

  // Apply the masking policy to the table and all fields in COLUMN_TO_LOB_PG_MAP with the same policy name
  var applyPolicySQL = "SELECT FIELD, DBNAME, SCHEMANAME, TABLENAME " +
                       "FROM DEV_11111_METADATA_DB.META_T.COLUMN_TO_LOB_PG_MAP " +
                       "WHERE SNOWFLAKEPOLICYNAME = ?";
  var applyPolicyStatement = snowflake.createStatement({sqlText: applyPolicySQL, binds: [v_policy_name]});
  var applyPolicyResultSet = applyPolicyStatement.execute();
  while (applyPolicyResultSet.next()) {
    v_field_name = applyPolicyResultSet.getColumnValue("FIELD");
    v_db_name = applyPolicyResultSet.getColumnValue("DBNAME");
    v_schema_name = applyPolicyResultSet.getColumnValue("SCHEMANAME");
    v_table_name = applyPolicyResultSet.getColumnValue("TABLENAME");

    // Apply the masking policy to the field
    var alterTableSQL = "ALTER TABLE " + v_db_name + "." + v_schema_name + "." + v_table_name +
                        " MODIFY COLUMN " + v_field_name + " SET MASKING POLICY " + v_policy_name;
    snowflake.execute({sqlText: alterTableSQL});
  }
}

// Drop the temporary table
var dropTempTableSQL = "DROP TABLE IF EXISTS temp_created_policies";
snowflake.execute({sqlText: dropTempTableSQL});

return 'Masking policies created and applied successfully';
$$;
