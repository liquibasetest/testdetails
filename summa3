Fine-Grain Access Control:
Fine-grain access control involves granting precise permissions and access rights at a granular level within the database. Each user or role may have very specific privileges, allowing or restricting actions down to a fine level of detail.

Example - Fine-Grain Access Control:

User A can only read data from a specific table.
User B can insert, update, and delete records in a particular column of a table.
User C has access to a subset of rows within a table.
Coarse-Grain Access Control:
Coarse-grain access control involves providing more generalized access permissions. Users or roles might have broader privileges, covering larger portions of the database or even the entire database.

Example - Coarse-Grain Access Control:

A group of users has read and write access to an entire database.
All authenticated users can read data from a specific set of tables.

I observed that within the Athena consumption module, a resource link was established at both the database and table levels. In such cases, whenever a new table is added to this database in the federated governance account, a resource link needs to be created again. To streamline this process, it would be beneficial to create a resource link solely for the database. I tested this scenario as part of another proof of concept (POC). Please refer the attached consumption permission Terraform module and refer to the variables folder for guidance on creating a resource link for the database and granting access.


Following our previous discussion, we discussed how Terraform requests a resource link at both the database and table levels to consume data from the federated or central lake formation account. If a new table is added to this database in the federated governance account in the future, a resource link needs to be created again. To streamline this process, it would be more efficient to create a resource link only for the database. As part of another proof of concept (POC), I tested this scenario. Please refer the attached consumption permission Terraform module and refer to the variables folder for instructions on creating a resource link for the database and granting access.


I haven't seen the authoring instance set up for FRDC yet. Please inform me once it's ready for both Immuta and JADE INT.


In our POC, we aimed to create a Redshift cluster in the consumption account to reference the S3 bucket in the producer account via CADS request. Initially, the plan was to create Glue catalog tables in the consumption account so that both Athena and Redshift Spectrum could utilize the Glue catalog table. This approach had the advantage of not needing to create external tables in Redshift. Athena worked well with the Glue service role having access to the S3 bucket through CADS request. However, for Redshift Spectrum, the Redshift cluster role also needed CADS request access to the producer S3 bucket. Additionally, certain data types supported in Glue were not compatible with Redshift (e.g., Smallint is not supported in Redshift).

Another approach considered was creating a Redshift Spectrum role that could access the S3 bucket and creating external tables in redshift, so in this case only for cluster role needs to have access for 

Regarding Immuta, the authoring instance is pending setup, and updates will be provided once it is established.

My thoughts: Instead of creating external tables or Glue tables in the consumption account, utilizing Lake Formation to grant access at the database level can be considered. This approach would avoid the need for CADS requests, maintain consistency in field names between the consumptions(multiple) and producer accounts, and facilitate better management in the producer account. Fine-grained access control could still be achieved through Immuta in this setup.


So for the progress: 


